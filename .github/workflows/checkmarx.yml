name: Checkmarx Scan
on:
   push:
    branches:
      - master
   pull_request:
     branches:
       - master

jobs:
   checkmarx:
     runs-on: ubuntu-latest

     steps:
       - name: Checkout Code
         uses: actions/checkout@v2
       - name: Checkmarx AST Github Action
        # You may pin to the exact commit or the version.
         # uses: Checkmarx/ast-github-action@749fec53e0db0f6404a97e2e0807c3e80e3583a7
         uses: Checkmarx/ast-github-action@2.0.23
         with:
    # Provide the AST portal URL
          base_uri: https://us.ast.checkmarx.net
        # Provide the Tenant for AST portal URL
          cx_tenant: guidepointse-partner-nfr
          # Client ID for AST portal authentication
          cx_client_id: new-client
          # Secret key for AST portal authentication
          cx_client_secret: xkQThZ7ON29yctrpBCb9l5WIhf7Jtu45
          # Select a Checkmarx Project Name
          project_name: demo
          # optional, default is ${{ github.repository }}
          # Branch name
          branch: master
          # optional, default is ${{ github.head_ref || github.ref }} ##
          # GitHub API Token
          #github_token: 
          # optional, default is ${{ github.token }}
          # Additional parameters for AST scan
         # additional_params: 
          # optional, default is 
          # Repository name for PR decoration
          ##
          #namespace: 
          # optional, default is ${{ github.repository_owner }}
          # Pr Number of the pull request that needs the decoration
          #pr_number: 
          # optional, default is ${{ github.event.number }}
          #break_build: false
      #  - name: Check for critical vulnerabilities
      #    run: |
      #     critical_vulns=$(checkmarx-cli get-results --project "${{ github.repository }}-${{ github.sha }}" | grep "Critical" | wc -l)
      #     if [ "$critical_vulns" -gt 0 ]; then
      #       echo "Critical vulnerabilities found. Failing the build."
      #       exit 1  # This will fail the action and block merging
      #     else
      #       echo "No critical vulnerabilities found."
      #     # Step 3: Download and parse the results from Checkmarx
      #  - name: Download Checkmarx Report
      #    run: |
      #     curl -u ${{ secrets.CHECKMARX_API_KEY }} -o checkmarx-report.xml "${{ secrets.CHECKMARX_URL }}/cxrestapi/sast/scans/${{ github.sha }}/results"  # Adjust API endpoint as needed
          
      # # Optional: Step 4: Check for vulnerabilities and post the results to the PR (via comment or other methods)
      #  - name: Check for Critical Vulnerabilities
      #    run: |
      #     critical_vulns=$(grep -i "Critical" checkmarx-report.xml | wc -l)
      #     if [ "$critical_vulns" -gt 0 ]; then
      #       echo "Critical vulnerabilities found."
      #       exit 1  # Fail the job if critical vulnerabilities are found
      #     else
      #       echo "No critical vulnerabilities found."
      #     fi

      # # Step 5: Upload the report to GitHub Actions for visibility
      #  - name: Upload Checkmarx Report as Artifact
      #    uses: actions/upload-artifact@v2
      #    with:
      #     name: checkmarx-report
      #     path: checkmarx-report.xml  # Path to the report file
env:
   ACTIONS_STEP_DEBUG: true

          





# name: Checkmarx Scan

# on:
#   push:
#     branches:
#       - master
#   pull_request:
#     branches:
#       - master

# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v2

#       - name: Set up Checkmarx CXFlow
#         uses: checkmarx-ts/checkmarx-cxflow-github-action@v2.3
#         with:
#          project: ${{ secrets.CHECKMARX_PROJECT }} # <-- Insert Checkmarx SAST Project Name
#          #team: ${{ secrets.CHECKMARX_TEAMS }}
#          checkmarx_url: ${{ secrets.CHECKMARX_URL }} # To be stored in GitHub Secrets.
#          checkmarx_username: ${{ secrets.CHECKMARX_USER }} # To be stored in GitHub Secrets.
#          checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }} # To be stored in GitHub Secrets.
#          checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }} # To be stored in GitHub Secrets.
#          break_build: false
#           # # Define the necessary inputs
#           # checkmarx_url: ${{ secrets.CHECKMARX_URL }}       # Your Checkmarx URL
#           # checkmarx_username: ${{ secrets.CHECKMARX_USERNAME }}  # Your Checkmarx Username
#           # checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}  # Your Checkmarx Password
#           # #CHECKMARX_ACCESS_TOKEN: ${{ secrets.CHECKMARX_ACCESS_TOKEN }}
#           # checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}
#           # project: 'demo'  # Name of the project in Checkmarx
#           # app: 'ckdemo'  # Application name in Checkmarx
#           # #team: 'your-team-name'  # Team name in Checkmarx
#        # break_build: 'false'  # Optional: Set to 'true' to break the build if high-severity issues are found
#     env:
#        ACTIONS_STEP_DEBUG: true

















# name: Checkmarx Security Scan
# on:
#   push:
#     branches:
#      - master  # Change this if you want to trigger scans on other branches
#   pull_request:
#     branches:
#      - master  # Change this if you want to trigger scans on PRs to other branches
#   schedule:
#     - cron: '30 5,17 * * *' # triggers the workflow every day at 5:30 and 17:30 UTC

# jobs:
#   sast:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2
#     - name: Checkmarx CxFlow Action
#       uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.4 #Github Action version
#       with:
#         project: ${{ secrets.CHECKMARX_PROJECT }} # <-- Insert Checkmarx SAST Project Name
#         #team: ${{ secrets.CHECKMARX_TEAMS }}
#         checkmarx_url: ${{ secrets.CHECKMARX_URL }} # To be stored in GitHub Secrets.
#         checkmarx_username: ${{ secrets.CHECKMARX_USER }} # To be stored in GitHub Secrets.
#         checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }} # To be stored in GitHub Secrets.
#         checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }} # To be stored in GitHub Secrets.
#         #checkmarx.version: 9.1
#         #repo-url: ${{ github.event.repository.url }}
#         break_build: false
#         scanners: sast
#         bug_tracker: Sarif
#         params: --namespace=${{ github.repository_owner }} --checkmarx.settings-override=true --repo-name=${{ github.event.repository.name }} --branch=${{ github.ref_name }} --cx-flow.filterSeverity --cx-flow.filterCategory  --checkmarx.disable-clubbing=true
#     - name: Upload SARIF file
#       uses: github/codeql-action/upload-sarif@v2
#       with:
#         sarif_file: cx.sarif
#     env:
#        ACTIONS_STEP_DEBUG: true


























# jobs:
#   checkmarx:
#     runs-on: ubuntu-latest
#     steps:
#      #- uses: Checkout Code
#      #- uses: Trigger Checkmarx Scan
#     - name: Checking out code
#       uses: actions/checkout@v2
#     - name: Trigger checkmarx scan
#       run: |
#          curl -X POST "https://us.ast.checkmarx.net/cxrestapi/projects/08c5e7e3-218d-429e-90a7-83bfed935305/scan" \
#          -H "Authorization: Bearer ${{ secrets.CX_API_TOKEN }}" \
#          -H "Content-Type: application/json" \
#          -d '{
#               "scanningConfiguration": {
#                 "scanningType": "Full Scan"
#               },
#               "source": {
#                 "type": "GitHub",
#                 "repository": "https://github.com/${{ github.repository }}",
#                 "branch": "${{ github.ref }}"
#               }
#             }'
#       env:
#           CX_API_TOKEN: ${{ secrets.CX_API_TOKEN }}

#     - name: Results
#       run: |
#            curl -X GET "https://us.ast.checkmarx.net/cxrestapi/results/aaa1a1c3-7a91-468d-9fc4-9ce01270f78e/sast" \
#            -H "Authorization: Bearer ${{ secrets.CX_API_TOKEN }}"
#       env:
#           CX_API_TOKEN: ${{ secrets.CX_API_TOKEN }}

          